import os
import sys
import simple_slurm

# --- Configuration ---
# Input File Paths (adjust if they differ)
episeries_path = "/users/rushworth/gwr089/scratch/Generalization-Preprocess/zach/TEST/epi2d/f"
t1wimg_path = "/users/rushworth/gwr089/scratch/Generalization-Preprocess/zach/structural/structural_restore"
t1wmask_path = "/users/rushworth/gwr089/scratch/Generalization-Preprocess/zach/structural/structural_brain_mask"

# Derive the expected vars file path based on episeries
# Assumes vars file is in work/ subdir relative to episeries dir
epi_dir = os.path.dirname(episeries_path)
vars_file_path = os.path.join(epi_dir, "work", "motion_correction_vars.sh")

# Path to the python interpreter running this script
python_executable = sys.executable

# Get the directory where this submission script lives
script_dir = os.path.dirname(os.path.abspath(__file__))

# Paths to your motion scripts (only motion3 needed directly now)
motion3_script = os.path.join(script_dir, "motion3.py")

# --- SLURM Job Submission ---
print(f"Using Python executable: {python_executable}")
print(f"Expecting vars file at: {vars_file_path}")
print(f"Motion scripts directory: {script_dir}")

# 1. Submit combined motion1 & motion2 script calls
# Ensure MRCATDIR is set in the job's environment if needed
# You might need to add setup commands (e.g., module loads) if they
# were implicitly handled by your interactive environment before.
slurm12 = simple_slurm.Slurm(
    time="00:10:00",
    mem_per_cpu="4G",
    cpus_per_task=2,
    job_name='motion_pipeline_step12',
    error=f'motion_pipeline_step12_{simple_slurm.Slurm.JOB_ARRAY_MASTER_ID}_{simple_slurm.Slurm.JOB_ARRAY_ID}.err',
    output=f'motion_pipeline_step12_{simple_slurm.Slurm.JOB_ARRAY_MASTER_ID}_{simple_slurm.Slurm.JOB_ARRAY_ID}.out'
)

# --- IMPORTANT: Add any necessary setup commands here ---
# Example: If MRCATDIR is not globally available on compute nodes:
# mrcat_dir_path = "/path/to/your/mrcat/dir" # Define this path
# slurm12.add_cmd(f"export MRCATDIR={mrcat_dir_path}")
# Or if modules are needed:
# slurm12.add_cmd("module load your_required_module")
# ---------------------------------------------------------

command1_sh = f"sh $MRCATDIR/pipelines/PreprocFunc_macaque/MotionCorrection_CreateRefImg_macaque.sh --episeries={episeries_path} --t1wimg={t1wimg_path} --t1wmask={t1wmask_path}"
command2_sh = f"sh $MRCATDIR/pipelines/PreprocFunc_macaque/MotionCorrection_PrepareRefImg_macaque.sh --vars={vars_file_path}"

# Combine commands with a newline for sequential execution
combined_command = f"{command1_sh}\n{command2_sh}"

job_id12 = slurm12.sbatch(combined_command)
print(f"Submitted combined motion1/motion2 job: {job_id12}")


# 2. Submit motion3.py jobs in parallel (depend on the combined job finishing successfully)
slurm3_base_params = {
    "time": "00:10:00",
    "mem_per_cpu": "4G",
    "cpus_per_task": 2,
    "dependency": {'afterok': job_id12}
}


# Job 3a: vols 0-1
slurm3 = simple_slurm.Slurm(
    **slurm3_base_params,
    job_name='motion_pipeline_step3_from0to1',
    error=f'motion_pipeline_step3_from0to1_{simple_slurm.Slurm.JOB_ARRAY_MASTER_ID}_{simple_slurm.Slurm.JOB_ARRAY_ID}.err',
    output=f'motion_pipeline_step3_from0to1_{simple_slurm.Slurm.JOB_ARRAY_MASTER_ID}_{simple_slurm.Slurm.JOB_ARRAY_ID}.out'
)
command3a = f"{python_executable} {motion3_script} --vars-file={vars_file_path} --from-vol=0 --to-vol=1"
# job_id3a = slurm3.sbatch(command3a)
# print(f"Submitted motion3 job (0-1): {job_id3a} (depends on {job_id12})")

# Job 3b: vols 2-3
slurm3 = simple_slurm.Slurm(
    **slurm3_base_params,
    job_name='motion_pipeline_step3_from2to3',
    error=f'motion_pipeline_step3_from2to3_{simple_slurm.Slurm.JOB_ARRAY_MASTER_ID}_{simple_slurm.Slurm.JOB_ARRAY_ID}.err',
    output=f'motion_pipeline_step3_from2to3_{simple_slurm.Slurm.JOB_ARRAY_MASTER_ID}_{simple_slurm.Slurm.JOB_ARRAY_ID}.out'
)
command3b = f"{python_executable} {motion3_script} --vars-file={vars_file_path} --from-vol=2 --to-vol=3"
job_id3b = slurm3.sbatch(command3b)
print(f"Submitted motion3 job (2-3): {job_id3b} (depends on {job_id12})")

print("\nAll jobs submitted.")
print(f"Monitor progress using:\nsqueue -u $USER")
print(f"Check output files (if generated by scripts or SLURM).")
